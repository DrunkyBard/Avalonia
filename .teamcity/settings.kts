// ------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated.
//
//     - To turn off auto-generation set:
//
//         [TeamCity (AutoGenerate = false)]
//
//     - To trigger manual generation invoke:
//
//         nuke --generate-configuration TeamCity --host TeamCity
//
// </auto-generated>
// ------------------------------------------------------------------------------

import jetbrains.buildServer.configs.kotlin.v2018_1.*
import jetbrains.buildServer.configs.kotlin.v2018_1.buildFeatures.*
import jetbrains.buildServer.configs.kotlin.v2018_1.buildSteps.*
import jetbrains.buildServer.configs.kotlin.v2018_1.triggers.*
import jetbrains.buildServer.configs.kotlin.v2018_1.vcs.*

version = "2018.2"

project {
    buildType(GenerateCppHeaders)
    buildType(Clean)
    buildType(CompileNative)
    buildType(CompileHtmlPreviewer)
    buildType(Compile)
    buildType(CreateIntermediateNugetPackages)
    buildType(CreateNugetPackages)
    buildType(Package)
    buildType(ZipFiles)
    buildType(CiAzureWindows)

    buildTypesOrder = arrayListOf(GenerateCppHeaders, Clean, CompileNative, CompileHtmlPreviewer, Compile, CreateIntermediateNugetPackages, CreateNugetPackages, Package, ZipFiles, CiAzureWindows)

    params {
        text (
            "env.Configuration",
            label = "Configuration",
            description = "configuration",
            value = "",
            allowEmpty = true,
            display = ParameterDisplay.NORMAL)
        checkbox (
            "env.SkipTests",
            label = "SkipTests",
            description = "skip-tests",
            value = "False",
            checked = "True",
            unchecked = "False",
            display = ParameterDisplay.NORMAL)
        text (
            "env.ForceNugetVersion",
            label = "ForceNugetVersion",
            description = "force-nuget-version",
            value = "",
            allowEmpty = true,
            display = ParameterDisplay.NORMAL)
        checkbox (
            "env.SkipPreviewer",
            label = "SkipPreviewer",
            description = "skip-previewer",
            value = "False",
            checked = "True",
            unchecked = "False",
            display = ParameterDisplay.NORMAL)
        select (
            "env.Verbosity",
            label = "Verbosity",
            description = "Logging verbosity during build execution. Default is 'Normal'.",
            value = "Normal",
            options = listOf("Minimal" to "Minimal", "Normal" to "Normal", "Quiet" to "Quiet", "Verbose" to "Verbose"),
            display = ParameterDisplay.NORMAL)
        param(
            "teamcity.runner.commandline.stdstreams.encoding",
            "UTF-8"
        )
    }
}
object GenerateCppHeaders : BuildType({
    name = "GenerateCppHeaders"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "nukebuild/build.cmd"
            arguments = "GenerateCppHeaders --skip"
        }
    }
})
object Clean : BuildType({
    name = "Clean"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "nukebuild/build.cmd"
            arguments = "Clean --skip"
        }
    }
})
object CompileNative : BuildType({
    name = "CompileNative"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "nukebuild/build.cmd"
            arguments = "CompileNative --skip"
        }
    }
    dependencies {
        snapshot(Clean) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
        snapshot(GenerateCppHeaders) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
    }
})
object CompileHtmlPreviewer : BuildType({
    name = "CompileHtmlPreviewer"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "nukebuild/build.cmd"
            arguments = "CompileHtmlPreviewer --skip"
        }
    }
    dependencies {
        snapshot(Clean) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
    }
})
object Compile : BuildType({
    name = "Compile"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "nukebuild/build.cmd"
            arguments = "Compile --skip"
        }
    }
    dependencies {
        snapshot(Clean) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
        snapshot(CompileNative) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
        snapshot(CompileHtmlPreviewer) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
    }
})
object CreateIntermediateNugetPackages : BuildType({
    name = "CreateIntermediateNugetPackages"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "nukebuild/build.cmd"
            arguments = "CreateIntermediateNugetPackages --skip"
        }
    }
    dependencies {
        snapshot(Compile) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
    }
})
object CreateNugetPackages : BuildType({
    name = "CreateNugetPackages"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "nukebuild/build.cmd"
            arguments = "CreateNugetPackages --skip"
        }
    }
    dependencies {
        snapshot(CreateIntermediateNugetPackages) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
    }
})
object Package : BuildType({
    name = "Package"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "nukebuild/build.cmd"
            arguments = "Package --skip"
        }
    }
    dependencies {
        snapshot(CreateNugetPackages) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
    }
})
object ZipFiles : BuildType({
    name = "ZipFiles"
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "nukebuild/build.cmd"
            arguments = "ZipFiles --skip"
        }
    }
})
object CiAzureWindows : BuildType({
    name = "CiAzureWindows"
    type = Type.DEPLOYMENT
    vcs {
        root(DslContext.settingsRoot)
        cleanCheckout = true
    }
    steps {
        exec {
            path = "nukebuild/build.cmd"
            arguments = "CiAzureWindows --skip"
        }
    }
    triggers {
        vcs {
            triggerRules = "+:**"
        }
        schedule {
            schedulingPolicy = daily {
                hour = 3
            }
            triggerRules = "+:**"
            triggerBuild = always()
            withPendingChangesOnly = false
            enableQueueOptimization = true
            param("cronExpression_min", "3")
        }
    }
    dependencies {
        snapshot(Package) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
        snapshot(ZipFiles) {
            onDependencyFailure = FailureAction.FAIL_TO_START
            onDependencyCancel = FailureAction.CANCEL
        }
    }
})
